import { FC, useEffect, useCallback, useState } from "react";
import { Chat, Room, User } from "@/types";
import { capitalizeFirstLetter, isLoggedIn, showErrorMessage } from "@/utils";
import { API_URL } from "@/config";
import { io, Socket } from "socket.io-client";
import Head from "next/head";
import axios from "axios";
import LoadingDots from "@/components/Loader";
import UsersModal from "@/components/Users";
import moment from "moment";

type Props = {
  userData: User;
};

const Home: FC<Props> = ({ userData }) => {
  const [connectOnChatLoad, setConnectOnChatLoad] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [hasSubbed, setHasSubbed] = useState(false);
  const [loadingRooms, setLoadingRooms] = useState(true);
  const [loadingChats, setLoadingChats] = useState(false);
  const [chats, setChats] = useState<Array<Chat>>([]);
  const [room, setRoom] = useState<Room>();
  const [rooms, setRooms] = useState<Array<Room>>([]);
  const [text, setText] = useState("");
  const [socket, setSocket] = useState<Socket>();
  const [newChat, setNewChat] = useState<Chat>();

  const loadChats = async (id: string) => {
    setLoadingChats(true);
    try {
      const { data } = await axios.get(`${API_URL}/rooms/${id}`, {
        headers: {
          Authorization: `Bearer ${userData.token}`,
        },
      });
      setChats(data);
    } catch (error) {
      showErrorMessage(error);
    }
    setLoadingChats(false);
  };

  const loadChatRooms = useCallback(async () => {
    try {
      setConnectOnChatLoad(false);
      setLoadingRooms(true);
      const { data } = await axios.get(
        `${API_URL}/rooms?recipients=${userData._id}`,
        {
          headers: {
            Authorization: `Bearer ${userData.token}`,
          },
        }
      );

      if (data && data.length) {
        await loadChats(data[0]._id);
        setRoom(data[0]);
      }
      setRooms(data);
      setLoadingRooms(false);
    } catch (err) {
      showErrorMessage(err);
      setLoadingRooms(false);
    }
    setConnectOnChatLoad(true);
  }, [userData]);

  useEffect(() => {
    loadChatRooms();
  }, [loadChatRooms]);

  useEffect(() => {
    if (connectOnChatLoad) {
      const socks = io("http://localhost:8080", {
        path: "/ws/chrono",
        reconnectionAttempts: 100,
        autoConnect: true,
        forceNew: true,
      });

      socks.on("connect", () => {
        console.log("Connected!", socks.id);
        if (room && !hasSubbed) {
          socks.emit("subscribe", room._id);
          setHasSubbed(true);
        }

        socks.on("room-created", async (data) => {
          const { toBeNotified } = data;
          if (toBeNotified.includes(userData._id)) {
            setRooms([data.room, ...rooms]);
          }
        });

        socks.on("message", (message: Chat) => {
          const index = rooms.findIndex((r) => {
            return r._id === message.room;
          });
          let temp = [...rooms];
          if (index >= 0) {
            const _room = temp[index];
            _room.lastMessage = message.message;
            temp = temp.filter((r) => r._id !== message.room);
            setRooms([_room, ...temp]);
            setNewChat(message);
          }
        });
      });

      setSocket(socks);
    }
  }, [connectOnChatLoad, rooms]);

  useEffect(() => {
    if (newChat && newChat.room === room._id) {
      setChats([newChat, ...chats]);
    }
  }, [newChat]);

  return (
    <>
      {showModal && (
        <UsersModal
          closeModal={() => setShowModal(false)}
          userData={userData}
          rooms={rooms}
          setRooms={setRooms}
        />
      )}
      <Head>
        <title>Chat Room</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container">
        <aside className="sidebar">
          <h2>Chat Rooms</h2>
          <button onClick={() => setShowModal(true)}>New Chat</button>
          {loadingRooms ? (
            <LoadingDots />
          ) : (
            <ul>
              {rooms.map((_room) => (
                <li
                  key={_room._id}
                  className={
                    room && _room._id == room._id ? "active" : undefined
                  }
                  onClick={async () => {
                    socket.emit("subscribe", _room._id);
                    setRoom(_room);
                    await loadChats(_room._id);
                  }}
                >
                  <h4>
                    {capitalizeFirstLetter(
                      _room[
                        userData._id === _room.sender.id ? "receiver" : "sender"
                      ].name
                    )}
                  </h4>
                  <p>
                    {_room.lastMessage.trim().length
                      ? _room.lastMessage
                      : "__No message__"}
                  </p>
                </li>
              ))}
            </ul>
          )}
        </aside>
        <main className="main-content">
          <header className="chat-header">
            <h1>Welcome to the Chat</h1>
          </header>
          <div className="chat-area">
            {loadingChats ? (
              <LoadingDots />
            ) : (
              chats.map((chat) => {
                return (
                  <div
                    key={chat._id}
                    className={`${
                      chat.sender.id == userData._id
                        ? "message_sender"
                        : "message_receiver"
                    }`}
                  >
                    <p>{chat.message}</p>
                    <span>{moment(chat.createdAt).format("HH:mm A")}</span>
                  </div>
                );
              })
            )}
          </div>
          <form id="chat-form" autoComplete="off">
            <input
              type="text"
              id="message"
              placeholder="Type a message..."
              value={text}
              onChange={(e) => setText(e.target.value)}
            />
            <button
              type="submit"
              onClick={(e) => {
                e.preventDefault();
                if (text.trim().length && room) {
                  socket.volatile.emit("message", {
                    room: room._id,
                    message: text,
                    sender: {
                      id: userData._id,
                      username: userData.username,
                    },
                    receiver: {
                      id: room.recipients.find((r) => r != userData._id),
                      username:
                        room[
                          userData._id === room.sender.id
                            ? "receiver"
                            : "sender"
                        ].name,
                    },
                  });
                  setText("");
                }
              }}
            >
              Send
            </button>
          </form>
        </main>
      </div>
    </>
  );
};

export default Home;

export async function getServerSideProps({ req }) {
  const userData = isLoggedIn(req);
  if (userData) {
    return {
      props: {
        userData,
      },
    };
  } else {
    return {
      props: {},
      redirect: {
        destination: "/auth/login",
        permanent: false,
      },
    };
  }
}
